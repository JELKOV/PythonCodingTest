"""
# 문제명 (예: 문자열 바꿔서 찾기 LV_0)

[1] 문제 설명

    (1) 목표
    - 문제의 최종 목적은 무엇인가? (예: 가장 큰 수, 포함 여부, 갯수 세기 등)

    (2) 규칙
    - 어떤 조건/제약을 만족해야 하는가?
    - 특정한 동작, 변환, 비교 등의 조건이 있다면 서술

    (3) 입력 값
    - 어떤 자료형이 주어지는가? (str, list, int 등)
    - 길이/범위 제한도 함께 작성

    (4) 출력 값
    - 어떤 형식의 값을 출력해야 하는가? (정수, 문자열, 리스트 등)

    (5) 예외 상황
    - 문제에 명시되지 않았지만, 발생할 수 있는 이상한 경우가 있는가?
    - 예: 빈 리스트, 0 나누기 등

[2] 자료구조

    (1) 사용한 자료구조와 사용 이유
    - 예: List → 순서 유지 및 인덱싱
    - 예: Dict → 빠른 키 검색
    - 예: Set → 중복 제거, 포함 여부 판단
    - 예: Tuple → 불변 자료 저장
    - 예: String → 문자열 조작 및 비교
    - 예: Integer → 숫자 계산 등

[3] 알고리즘

    (1) 어떤 알고리즘 유형인지 판단
    - Basic Simulation: 규칙 그대로 구현
    - Brute Force: 모든 경우 탐색
    - Greedy: 매 순간 최선 선택
    - Sorting: 정렬 후 처리
    - DP: 중복 계산 줄이기
    - Hash / Dictionary 기반: 빠른 카운팅/매핑
    - Graph / BFS / DFS: 연결 탐색
    - Binary Search: 정렬된 데이터에서 이분 탐색
    - 기타: 특수 구조 (슬라이딩 윈도우, 투포인터 등)

    (2) 사용 이유 및 타당성 설명

[4] 흐름 설계

    (1) 입력 처리
    (2) 초기 상태 정의 (예: 변수, 리스트 초기화)
    (3) 반복/조건 처리 구조 (예: for, while, if 등)
    (4) 중간 상태 갱신 또는 저장
    (5) 종료 조건 / 최종 처리
    (6) 출력 반환
"""
