"""
# 문제명: 제로 스택 합 계산 LV_0

[1] 문제 설명

    (1) 목표
    - 주어진 K개의 숫자를 순서대로 입력받아 스택에 저장하되,
      숫자가 0인 경우 마지막에 추가된 숫자를 제거한다.
    - 최종적으로 스택에 남아있는 숫자들의 합을 구한다.

    (2) 규칙
    - 0이 아닌 숫자는 스택에 추가
    - 숫자가 0이면 스택에서 가장 최근에 추가된 숫자를 제거 (pop)
    - 스택이 비어 있을 때 0이 들어오면 아무 작업도 하지 않음

    (3) 입력 값
    - K (int): 숫자의 개수 (1 ≤ K ≤ 100,000)
    - 다음 K줄: 정수 입력 (0 또는 양의 정수)

    (4) 출력 값
    - 스택에 남아 있는 숫자들의 총합 (int)

    (5) 예외 상황
    - 0 입력 시 스택이 비어 있으면 pop을 하지 않음

[2] 자료구조

    - List (스택):
        - stack: 숫자 저장 및 후입선출(LIFO) 제거 처리
    - Integer:
        - number: 입력 숫자
        - sum_result: 최종 합계

[3] 알고리즘

    - Stack 처리:
        - 후입선출 구조 (LIFO) 활용
        - 숫자가 0이면 마지막 요소 제거

    - Basic Simulation:
        - 조건문과 반복문을 통해 스택 상태를 시뮬레이션

    - 누적 합:
        - 최종적으로 stack에 남은 값들의 합을 계산

[4] 흐름 설계

    (1) 숫자 개수 입력(K) 받기

    (2) stack 리스트 초기화

    (3) 반복 K번:
        - 숫자 입력
        - 숫자가 0이면: stack이 비어 있지 않으면 pop
        - 숫자가 0이 아니면: stack에 append

    (4) sum(stack)을 통해 남은 숫자들의 총합 계산

    (5) 결과 출력
"""

# 첫 번째 입력: 숫자의 개수 K
K = int(input("숫자의 개수를 입력하세요: "))

# 숫자를 저장할 스택 생성
stack = []

# K개의 숫자 입력 및 처리
for _ in range(K):
    number = int(input("숫자를 입력하세요: "))
    if number == 0 and stack:
        # 숫자가 0이면 스택에서 마지막으로 추가된 숫자 제거
        stack.pop()
    else:
        # 숫자가 0이 아니면 스택에 추가
        stack.append(number)

# 스택에 남아있는 숫자들의 합을 계산
sum_result = sum(stack)

# 최종 결과 출력
print(sum_result)
