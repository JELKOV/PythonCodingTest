"""
[1] 문제 설명  (자연어로 정리)
(1) 목표 : 문제의 최종적으로 원하는 결과는 무엇인가? (예: 배열 반환, 최대값 계산 등)
(2) 룰 : 	문제를 풀 때 따라야 할 조건, 규칙, 제한은 무엇인가?
(3) 입력 값 : 어떤 입력이 주어지는가? 자료형, 크기, 제약 조건 등
(4) 출력 값 : 어떤 형식의 결과를 출력해야 하는가?
(5) 예외 상황: 주어지지 않은 이상한 경우는? (예: 나눗셈 0, 빈 리스트 등)

[2] 자료구조
(1) List (리스트) : 순서가 있는 데이터, 반복, 인덱싱 가능해야 할 때
(2) Dictionary (딕셔너리): key로 빠르게 찾고 싶을 때 / O(1) 탐색 필요할 때
(3) Set (셋): 중복 제거, 포함 여부 판단 (in) / O(1) 포함 여부
(4) Tuple (튜플): 불변 자료, key로 사용하거나 안정적 순서 저장
(5) String: 문자열 처리, 슬라이싱, 탐색
(6) Boolean: 조건 분기
(7) Integer: 기본 숫자 계산
(8) Float: 소수점 연산 필요

[3] 알고리즘- 우선 순위로 적어놨습니다.

각 유형마다 “이게 필요하냐?”는 질문으로 판단하며, 사용 여부를 근거 중심으로 결정해야 합니다.

(1) Basic Simulation (기초 시뮬레이션) – 출제 빈도: 매우 높음
    - 판단 기준:	명시된 규칙을 그대로 구현하는 문제
    - 관련 키워드: 상태 변화, 조건 분기, 단순 연산, 위치 이동
    - 자료 구조:	List, String, Integer, Boolean
    - 관련 문제: 나선형 배열 채우기, 숫자 바꾸기, 이동 거리 계산 등

(2) Brute Force (완전 탐색) – 출제 빈도: 높음
    - 판단 기준:	가능한 경우를 모두 시도해서 답을 찾는 방식
    - 관련 키워드: 중첩 for문, 조건 검사
    - 자료 구조:	List, Range, Set
    - 관련 문제: 모든 부분 문자열 검사, 배열 내 조건 조합 계산

(3) Hash / Dictionary 기반 처리 – 출제 빈도: 중간
    - 판단 기준: 빠른 검색/카운팅이 필요할 때 사용
    - 관련 키워드: 빈도수 계산, 중복 탐지, 매핑 저장
    - 자료 구조:	dict, set
    - 관련 문제: 단어 등장 횟수, 투표 집계, key-value 관계 문제

(4) 기타: PCCE에서 잘 안 나오는 알고리즘 (거의 출제 X)

- Stack / Queue - 출제 빈도: 매우 낮음
	Stack: 후입선출 (LIFO) (함수 호출, 괄호 검사)
	Queue: 선입선출 (FIFO) (BFS 구현, 작업 대기열)
	ex) 괄호 짝 맞추기 (()[]) / 미로 탐색 시 BFS

- Heap - 출제 빈도: 매우 낮음
    항상 최대값/최솟값을 빠르게 꺼낼 수 있는 자료구조
    ex) 우선순위 큐, 작업 스케줄링 (가장 급한 작업부터 처리)

- Sorting - 출제 빈도: 거의 없음
    값을 특정 기준에 따라 정렬 (오름차순, 내림차순 등)
    ex) 시험 점수 정렬, 키 큰 사람부터 정렬 후 줄 세우기

- Greedy - 출제 빈도: 거의 없음
    매 순간 가장 좋은 선택(최선)을 하는 방식
    ex) 동전 거스름돈 문제 ( 가장 적은 동전으로 거스름돈 주기) 스터디룸 배정( 스터디룸을 예약에 따라 가장 많이 대여 해주는법)

- DP - 출제 빈도: 없음
    중복되는 부분 문제 결과를 저장해 사용
    ex) 피보나치 수열 (Top-down, Bottom-up), 배낭 문제, 최소 비용 계산

- Graph / DFS/BFS - 출제 빈도: 없음
    Graph: 정점과 간선으로 구성된 자료구조 (지도, 네트워크 구조)
    DFS/BFS: 노드 간 탐색 알고리즘
    ex) 미로 찾기, 친구 추천 시스템, 네트워크 전파

- Binary Search - 출제 빈도: 없음
    정렬된 배열에서 중간 값을 기준으로 탐색
    ex) 숫자 범위 이분탐색, 특정 조건 만족 최소값 찾기 (예: 최소 시간, 최소 거리)

[4] 흐름 설계
문제 마다 다르기 때문에 기본적인 설계는 그때 그때 다를 확률 이 높음
(1) 입력 처리
(2) 초기 상태 생성
(3) 핵심 로직 실행 (루프, 탐색, 조건 처리 등)
(4) 중간 상태 저장/ 갱신
(5) 종료 조건 확인/ 방향 전환 등
(6) 출력 포맷 구성
(7) 출력
"""

